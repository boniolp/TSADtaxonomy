{
  "name": "LOF",
  "full_name": "Local Outlier Factor",
  "category": "Distance-based",
  "Dim": "Univariate",
  "Sup": "Unsupervised",
  "Stream": false,
  "year": 2000,
  "authors": ["Markus M. Breunig", "Hans-Peter Kriegel", "Raymond T. Ng", "Jörg Sander"],
  "paper": "LOF: identifying density-based local outliers",
  "description": "The most commonly used proximity-based approach is the Local Outlier Factor (LOF), which measures the degree of being an outlier for each instance. Unlike the previous proximity-based models, which directly compute the distance of sub-sequences, LOF depends on how the instance is isolated to the surrounding neighborhood. This method aims to solve the outlier detection task where an outlier is considered as an observation that deviates so much from other observations as to arouse suspicion that it was generated by a different mechanism (Hawkins definition [Hawkins 1980]). This definition is coherent with the anomaly detection task in time series where the different mechanism can be either an arrhythmia in an electrocardiogram or a failure in the components of an industrial machine.",
  "code": "https://github.com/TheDatumOrg/TSB-UAD",
  "url":"https://dl.acm.org/doi/pdf/10.1145/335191.335388",
  "bibtex": "@article{10.1145/335191.335388,author = {Breunig, Markus M. and Kriegel, Hans-Peter and Ng, Raymond T. and Sander, J\"{o}rg},title = {LOF: identifying density-based local outliers},year = {2000},issue_date = {June 2000},publisher = {Association for Computing Machinery},address = {New York, NY, USA},volume = {29},number = {2},issn = {0163-5808},doi = {10.1145/335191.335388},journal = {SIGMOD Rec.},month = may,pages = {93–104},numpages = {12},}",
  "snippet_description": "We provide below an example of usage of LOF for time series (from TSB-UAD benchmark). Please install TSB-UAD as follows:",
  "snippet_install": "pip install tsb-uad",
  "snippet": "```python\nimport os\nimport numpy as np\nimport pandas as pd\nfrom TSB_UAD.utils.visualisation import plotFig\nfrom TSB_UAD.models.lof import LOF\nfrom TSB_UAD.models.feature import Window\nfrom TSB_UAD.utils.slidingWindows import find_length\nfrom TSB_UAD.vus.metrics import get_metrics\n\n#Read data\nfilepath = 'PATH_TO_TSB_UAD/ECG/MBA_ECG805_data.out'\ndf = pd.read_csv(filepath, header=None).dropna().to_numpy()\nname = filepath.split('/')[-1]\n\ndata = df[:,0].astype(float)\nlabel = df[:,1].astype(int)\n\n#Pre-processing    \nslidingWindow = find_length(data)\nX_data = Window(window = slidingWindow).convert(data).to_numpy()\n\n# Run LOF\nmodelName='LOF'\nclf = LOF(n_neighbors=20, n_jobs=1)\nclf.fit(X_data)\nscore = clf.decision_scores_\n\n#Post-processing\nscore = MinMaxScaler(feature_range=(0,1)).fit_transform(score.reshape(-1,1)).ravel()\nscore = np.array([score[0]]*math.ceil((slidingWindow-1)/2) + list(score) + [score[-1]]*((slidingWindow-1)//2))\n\n\n#Plot result\nplotFig(data, label, score, slidingWindow, fileName=name, modelName=modelName)\n\n#Print accuracy\nresults = get_metrics(score, label, metric=\"all\", slidingWindow=slidingWindow)\nfor metric in results.keys():\n    print(metric, ':', results[metric])\n```",
  "figure_result": ""

}
