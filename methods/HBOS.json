{
  "name": "HBOS",
  "full_name": "Histogram-based Outlier Score",
  "category": "Distribution-based",
  "Dim": "Univariate",
  "Sup": "Unsupervised",
  "Stream": false,
  "year": 2012,
  "authors": ["Markus Goldstein", "Andreas Dengel"],
  "paper": "Histogram-based Outlier Score (HBOS): A fast Unsupervised Anomaly Detection Algorithm",
  "description": "Histogram-based Outlier Score (HBOS) is a fast and efficient unsupervised anomaly detection algorithm. It assumes feature independence and computes anomaly scores using histograms of individual features. While not specifically designed for time series, HBOS can still be used for point or subsequence anomaly detection by treating subsequences as independent feature vectors. HBOS is well-suited for large datasets due to its linear time complexity. The TSB-UAD implementation wraps this method with preprocessing tools for time series input.",
  "code": "https://github.com/TheDatumOrg/TSB-UAD",
  "url": "https://www.goldiges.de/publications/HBOS-KI-2012.pdf",
  "bibtex": "@inproceedings{Goldstein2012HistogrambasedOS,title={Histogram-based Outlier Score (HBOS): A fast Unsupervised Anomaly Detection Algorithm},author={Markus Goldstein and Andreas R. Dengel},year={2012}}",
  "snippet_description": "We provide below an example of usage of HBOS for time series anomaly detection (from TSB-UAD benchmark). Please install TSB-UAD as follows:",
  "snippet_install": "pip install tsb-uad",
  "snippet": "```python\nimport os\nimport math\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom TSB_UAD.utils.visualisation import plotFig\nfrom TSB_UAD.models.hbos import HBOS\nfrom TSB_UAD.models.feature import Window\nfrom TSB_UAD.utils.slidingWindows import find_length\nfrom TSB_UAD.vus.metrics import get_metrics\n\n# Read data\nfilepath = 'PATH_TO_TSB_UAD/ECG/MBA_ECG805_data.out'\ndf = pd.read_csv(filepath, header=None).dropna().to_numpy()\nname = filepath.split('/')[-1]\n\ndata = df[:,0].astype(float)\nlabel = df[:,1].astype(int)\n\n# Pre-processing\nslidingWindow = find_length(data)\nX_data = Window(window=slidingWindow).convert(data).to_numpy()\n\n# Run HBOS\nmodelName = 'HBOS'\nclf = HBOS()\nclf.fit(X_data)\nscore = clf.decision_scores_\n\n# Post-processing\nscore = MinMaxScaler(feature_range=(0,1)).fit_transform(score.reshape(-1,1)).ravel()\nscore = np.array([score[0]]*math.ceil((slidingWindow-1)/2) + list(score) + [score[-1]]*((slidingWindow-1)//2))\n\n# Plot result\nplotFig(data, label, score, slidingWindow, fileName=name, modelName=modelName)\n\n# Print accuracy\nresults = get_metrics(score, label, metric=\"all\", slidingWindow=slidingWindow)\nfor metric in results.keys():\n    print(metric, ':', results[metric])\n```",
  "figure_result": ""
}



