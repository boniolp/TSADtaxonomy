{
  "name": "NORMA",
  "full_name": "NormA: Unsupervised Subsequence Anomaly Detection via Weighted Clustering",
  "category": "Clustering-based",
  "Dim": "Univariate",
  "Sup": "Unsupervised",
  "Stream": false,
  "year": 2021,
  "authors": ["Paul Boniol", "Michele Linardi", "Federico Roncallo", "Themis Palpanas", "Mohamed Meftah", "Emmanuel Remy"],
  "paper": "Unsupervised and scalable subsequence anomaly detection in large data series. The VLDB Journal, March 2021",
  "description": "NormA is a clustering-based algorithm for time series anomaly detection. It builds a normal model by clustering sub-sequences and assigning weights based on cluster properties such as size, distance, and time coverage. Anomalies are identified by measuring their deviation from this normal model (i.e., weighted average of the Euclidean distances with the centroids from the clustering step). NormA is designed to be both unsupervised and scalable for large-scale time series.",
  "code": "https://github.com/TheDatumOrg/TSB-UAD",
  "url": "https://helios2.mi.parisdescartes.fr/~themisp/publications/vldbj21-norma.pdf",
  "bibtex": "@article{10.1007/s00778-021-00655-8,author = {Boniol, Paul and Linardi, Michele and Roncallo, Federico and Palpanas, Themis and Meftah, Mohammed and Remy, Emmanuel},title = {Unsupervised and scalable subsequence anomaly detection in large data series},year = {2021},issue_date = {Nov 2021},publisher = {Springer-Verlag},address = {Berlin, Heidelberg},volume = {30},number = {6},issn = {1066-8888},doi = {10.1007/s00778-021-00655-8},journal = {The VLDB Journal},month = mar,pages = {909â€“931},numpages = {23},}",
  "snippet_description": "We provide below an example of usage of NORMA for time series anomaly detection (from TSB-UAD benchmark). Please install TSB-UAD as follows:",
  "snippet_install": "pip install tsb-uad",
  "snippet": "```python\nimport os\nimport math\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom TSB_UAD.utils.visualisation import plotFig\nfrom TSB_UAD.models.norma import NORMA\nfrom TSB_UAD.models.feature import Window\nfrom TSB_UAD.utils.slidingWindows import find_length\nfrom TSB_UAD.vus.metrics import get_metrics\n\n# Read data\nfilepath = 'PATH_TO_TSB_UAD/ECG/MBA_ECG805_data.out'\ndf = pd.read_csv(filepath, header=None).dropna().to_numpy()\nname = filepath.split('/')[-1]\n\ndata = df[:,0].astype(float)\nlabel = df[:,1].astype(int)\n\n# Pre-processing\nslidingWindow = find_length(data)\n\n# Run NormA\nmodelName = 'NORMA'\nclf = NORMA(pattern_length=slidingWindow, nm_size=3*slidingWindow)\nclf.fit(data)\nscore = clf.decision_scores_\n\n# Post-processing\nscore = MinMaxScaler(feature_range=(0,1)).fit_transform(score.reshape(-1,1)).ravel()\nscore = np.array([score[0]]*math.ceil((slidingWindow-1)/2) + list(score) + [score[-1]]*((slidingWindow-1)//2))\n\n# Plot result\nplotFig(data, label, score, slidingWindow, fileName=name, modelName=modelName)\n\n# Print accuracy\nresults = get_metrics(score, label, metric=\"all\", slidingWindow=slidingWindow)\nfor metric in results.keys():\n    print(metric, ':', results[metric])\n```",
  "figure_result": ""
}



