{
  "name": "LSTM-AD",
  "full_name": "Long Short-Term Memory Anomaly Detection",
  "category": "Forecasting-based",
  "Dim": "Multivariate",
  "Sup": "Semi-Supervised",
  "Stream": true,
  "year": 2015,
  "authors": ["Pankaj Malhotra", "L. Vig", "Gautam M. Shroff", "Puneet Agarwal"],
  "paper": "Long short term memory networks for anomaly detection in time series. ESANN",
  "description": "Long Short-Term Memory (LSTM) network has been demonstrated to be particularly efficient in learning inner features for sub-sequences classification or time series forecasting. Such a model can also be used for anomaly detection purposes. The principle is as follows: A stacked LSTM model is trained on normal parts of the data. The objective is to predict the following point or the subsequence using the previous ones. Consequently, the model will be trained to forecast a healthy state of the time series, and, therefore, will fail to forecast when it will encounter an anomaly.",
  "code": "https://github.com/TheDatumOrg/TSB-UAD",
  "url":"https://www.esann.org/sites/default/files/proceedings/legacy/es2015-56.pdf",
  "bibtex": "@inproceedings{Malhotra2015LongST,title={Long Short Term Memory Networks for Anomaly Detection in Time Series},author={Pankaj Malhotra and Lovekesh Vig and Gautam M. Shroff and Puneet Agarwal},booktitle={The European Symposium on Artificial Neural Networks},year={2015},}",
  "snippet_description": "We provide below an example of usage of LSTM-AD for time series (from TSB-UAD benchmark). Please install TSB-UAD as follows:",
  "snippet_install": "pip install tsb-uad",
  "snippet": "```python\n\nimport os\nimport numpy as np\nimport pandas as pd\nfrom TSB_UAD.utils.visualisation import plotFig\nfrom TSB_UAD.models.distance import Fourier\nfrom TSB_UAD.models.lstm import lstm\nfrom TSB_UAD.models.feature import Window\nfrom TSB_UAD.utils.slidingWindows import find_length\nfrom TSB_UAD.vus.metrics import get_metrics\n\n#Read data\nfilepath = 'PATH_TO_TSB_UAD/ECG/MBA_ECG805_data.out'\ndf = pd.read_csv(filepath, header=None).dropna().to_numpy()\nname = filepath.split('/')[-1]\n\ndata = df[:,0].astype(float)\nlabel = df[:,1].astype(int)\n\n#Pre-processing\nslidingWindow = find_length(data)\n\ndata_train = data[:int(0.1*len(data))]\ndata_test = data\n\n\n#Run LSTM\nmodelName='LSTM'\nclf = lstm(slidingwindow = slidingWindow, predict_time_steps=1, epochs = 50, patience = 5, verbose=0)\nclf.fit(data_train, data_test)\nmeasure = Fourier()\nmeasure.detector = clf\nmeasure.set_param()\nclf.decision_function(measure=measure)\n\n# Post-processing\nscore = MinMaxScaler(feature_range=(0,1)).fit_transform(score.reshape(-1,1)).ravel()\n#Plot result\nplotFig(data, label, score, slidingWindow, fileName=name, modelName=modelName) \n\n#Print accuracy\nresults = get_metrics(score, label, metric=\"all\", slidingWindow=slidingWindow)\nfor metric in results.keys():\n    print(metric, ':', results[metric])\n```",
  "figure_result": ""
}


