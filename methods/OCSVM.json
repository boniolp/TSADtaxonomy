{
  "name": "OCSVM",
  "full_name": "One-Class Support Vector Machine",
  "category": "Distribution-based",
  "Dim": "Univariate",
  "Sup": "Unsupervised",
  "Stream": false,
  "year": 1999,
  "authors": ["B. Scholkopf", "R. C. Williamson"," A. Smola", "J. Shawe-Taylor", "J. Platt"],
  "paper": "Support vector method for novelty detection. NeurIPS, 12",
  "description": "One-Class Support Vector Machine (OCSVM) is a classical distribution-based method for novelty detection. It aims to learn the boundary of the 'normal' data distribution in a high-dimensional feature space and classifies any instance falling outside this boundary as an anomaly. It typically constructs a hyperplane that best separates the origin from the data in the feature space, maximizing the margin. OCSVM is well-suited for time series anomaly detection, particularly when only normal data is available during training. The TSB-UAD implementation wraps Scikit-learn's OneClassSVM, adding convenience and pre-processing utilities for time series input.",
  "code": "https://github.com/TheDatumOrg/TSB-UAD",
  "url": "https://papers.nips.cc/paper_files/paper/1999/file/8725fb777f25776ffa9076e44fcfd776-Paper.pdf",
  "bibtex": "@inproceedings{10.5555/3009657.3009740,author = {Sch\"{o}lkopf, Bernhard and Williamson, Robert and Smola, Alex and Shawe-Taylor, John and Platt, John},title = {Support vector method for novelty detection},year = {1999},publisher = {MIT Press},address = {Cambridge, MA, USA},booktitle = {Proceedings of the 13th International Conference on Neural Information Processing Systems},pages = {582â€“588},numpages = {7},location = {Denver, CO},series = {NIPS'99}}",
  "snippet_description": "We provide below an example of usage of OCSVM for time series anomaly detection (from TSB-UAD benchmark). Please install TSB-UAD as follows:",
  "snippet_install": "pip install tsb-uad",
  "snippet": "```python\nimport os\nimport math\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom TSB_UAD.utils.visualisation import plotFig\nfrom TSB_UAD.models.ocsvm import OCSVM\nfrom TSB_UAD.models.feature import Window\nfrom TSB_UAD.utils.slidingWindows import find_length\nfrom TSB_UAD.vus.metrics import get_metrics\n\n# Read data\nfilepath = 'PATH_TO_TSB_UAD/ECG/MBA_ECG805_data.out'\ndf = pd.read_csv(filepath, header=None).dropna().to_numpy()\nname = filepath.split('/')[-1]\n\ndata = df[:,0].astype(float)\nlabel = df[:,1].astype(int)\n\n# Pre-processing\nslidingWindow = find_length(data)\ndata_train = data[:int(0.1*len(data))]\ndata_test = data\n\nX_train = Window(window=slidingWindow).convert(data_train).to_numpy()\nX_test = Window(window=slidingWindow).convert(data_test).to_numpy()\n\nX_train_ = MinMaxScaler(feature_range=(0,1)).fit_transform(X_train.T).T\nX_test_ = MinMaxScaler(feature_range=(0,1)).fit_transform(X_test.T).T\n\n# Run OCSVM\nmodelName = 'OCSVM'\nclf = OCSVM(nu=0.05)\nclf.fit(X_train_, X_test_)\nscore = clf.decision_scores_\n\n# Post-processing\nscore = np.array([score[0]]*math.ceil((slidingWindow-1)/2) + list(score) + [score[-1]]*((slidingWindow-1)//2))\nscore = MinMaxScaler(feature_range=(0,1)).fit_transform(score.reshape(-1,1)).ravel()\n\n# Plot result\nplotFig(data, label, score, slidingWindow, fileName=name, modelName=modelName)\n\n# Print accuracy\nresults = get_metrics(score, label, metric=\"all\", slidingWindow=slidingWindow)\nfor metric in results.keys():\n    print(metric, ':', results[metric])\n```",
  "figure_result": ""
}


